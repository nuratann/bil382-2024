plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.3'
    id 'io.spring.dependency-management' version '1.1.4'
}

ext {
    springCloudVersion = "2023.0.0"
}

group = 'kg.buyers'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    testImplementation 'org.springframework.security:spring-security-test'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'org.postgresql:postgresql'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    // https://mvnrepository.com/artifact/org.springdoc/springdoc-openapi-starter-webmvc-ui
    implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.5.0'

}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:$springCloudVersion"
    }
}

tasks.named('test') {
    useJUnitPlatform()
}

test {
    useJUnitPlatform()
    testLogging {
        events "PASSED", "FAILED", "SKIPPED"
        exceptionFormat "full"
        showExceptions true
        showCauses true
        showStackTraces true
        showStandardStreams true // это включит вывод системных потоков (System.out, System.err)
    }

    afterTest { descriptor, result ->
        def color
        def status = result.resultType
        switch (status) {
            case org.gradle.api.tasks.testing.TestResult.ResultType.SUCCESS:
                color = "\u001B[32m" // зеленый
                break
            case org.gradle.api.tasks.testing.TestResult.ResultType.FAILURE:
                color = "\u001B[31m" // красный
                break
            case org.gradle.api.tasks.testing.TestResult.ResultType.SKIPPED:
                color = "\u001B[33m" // желтый
                break
        }
        println "${color}${descriptor.name} ${status}\u001B[0m"
    }
}

